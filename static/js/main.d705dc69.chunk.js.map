{"version":3,"sources":["reportWebVitals.js","WordItem.js","WordsList.js","Pages/GamePage.js","Pages/Home.js","Pages/CreateNewGamePage.js","Pages/GameCodeViewPage.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","WordItem","title","showItemsDescription","className","onClick","WordItemDescription","description","pronunciation","example","WordsList","this","props","contacts","map","wordTowordItem","React","Component","GamePage","state","getWord","getDetailsToThisWord","gameCode","lastSentence","newSentence","story","gameID","definition","getNewWords","e","setState","i","getJsonFromApi","index","getIndex","target","textContent","console","log","word","getDefinitionFromApi","fetch","res","json","text","findIndex","obj","component","getGameFromDB","codePIN","firebase","firestore","collection","where","get","game","forEach","doc","id","data","handleInput","value","submitNewSentence","update","navigateToHomePage","location","document","body","style","backgroundColor","concat","history","push","pathname","length","placeholder","onChange","type","Home","code","getDataFromDB","navigateToGamePage","background","to","startGameWithCode","CreateNewGamePage","level","goToCode","GameCodeViewPage","Math","floor","random","createNewGame","event","add","gamePIN","toString","docRef","catch","error","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"yMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sDCPDQ,EAAW,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,qBAC7B,OACQ,qBAAKC,UAAU,WAAWC,QAASF,EAAnC,SACI,oBAAIC,UAAU,SAAd,SAAwBF,OAK3BI,EAAsB,SAAC,GAAmD,IAAlDJ,EAAiD,EAAjDA,MAAOK,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,QAEpE,OACQ,sBAAKL,UAAU,aAAf,UACI,oBAAIA,UAAU,SAAd,SAAwBF,IACxB,oBAAIE,UAAU,gBAAd,SAA+BI,IAC/B,oBAAGJ,UAAU,kBAAb,yBAA4CG,KAC5C,oBAAGH,UAAU,kBAAb,sBAAyCK,SCZ5CC,EAAb,4JAEI,WACI,OACI,qBAAKN,UAAU,WAAf,SACHO,KAAKC,MAAMC,SAASC,IAAIH,KAAKC,MAAMG,sBAL5C,GAA+BC,IAAMC,W,QCIxBC,G,MAAb,4MACIC,MAAQ,CACJN,SAAU,GACVO,QAAS,GACTC,sBAAsB,EACtBC,SAAU,GACVC,aAAc,GACdC,YAAa,GACbC,MAAO,GACPC,OAAQ,GACRC,WAAY,IAVpB,EAgCIC,YAAc,SAACC,GACX,EAAKC,SAAS,CACVjB,SAAU,GACVQ,sBAAsB,IAE1B,IAAK,IAAIU,EAAI,EAAGA,EAAI,EAAGA,IACnB,EAAKC,gBAAe,IAtChC,EA0CI7B,qBAAuB,SAAC0B,GACpB,IAAII,EAAQ,EAAKC,SAASL,EAAEM,OAAOC,aACnCC,QAAQC,IAAIL,GACZ,IAAIb,EAAU,EAAKD,MAAMN,SAASoB,GAAOM,KAEzC,EAAKC,qBAAqBpB,GAE1B,EAAKU,SAAS,CACVV,QAASA,EACTC,sBAAsB,KAnDlC,EAuDImB,qBAAuB,SAACpB,GAGpBqB,MAAM,yCAA2CrB,EAAU,8IACtDzB,MAAK,SAAA+C,GAAG,OAAIA,EAAIC,UAChBhD,MAAK,SAAAgD,GAELN,QAAQC,IAAIK,GAET,EAAKb,SAAS,CACfH,WAAYgB,EAAK,GAAGC,WAjEnC,EA4EIV,SAAW,SAAChC,GACR,OAAO,EAAKiB,MAAMN,SAASgC,WAAU,SAAAC,GAAG,OAAIA,EAAIP,OAASrC,MA7EjE,EAgFIa,eAAkB,SAACwB,EAAMQ,GACrB,IAAM7C,EAAQqC,EAAKA,KACbhC,EAAc,EAAKY,MAAMQ,WACzBnB,EAAgB+B,EAAK/B,cAE3B,OAAQuC,GACJ,IAAK,sBACD,OAAO,cAAC,EAAD,CAAqB7C,MAAQA,EAAOK,YAAaA,EAAaC,cAAeA,IACxF,QACI,OAAO,cAAC,EAAD,CAAsBN,MAAOA,EAAOC,qBAAsB,EAAKA,sBAAhDD,KAzFtC,EA8FI8C,cAAiB,SAACC,GACAC,IACTC,YACAC,WAAW,QACXC,MAAM,UAAW,KAAMJ,GACvBK,MACA3D,MAAK,SAAA4D,GACFA,EAAKC,SAAQ,SAACC,GACVpB,QAAQC,IAAR,UAAemB,EAAIC,GAAnB,eAA4BD,EAAIE,SAEhC,EAAK7B,SAAS,CACVR,SAAU2B,EACV1B,aAAckC,EAAIH,IAAI,gBACtB7B,MAAOgC,EAAIH,IAAI,SACf5B,OAAQ+B,EAAIC,YA5GpC,EAoHIE,YAAc,SAAC/B,GACX,EAAKC,SAAS,CACVN,YAAaK,EAAEM,OAAO0B,SAtHlC,EA0HIC,kBAAoB,WAEhBZ,IACKC,YACAC,WAAW,QACXK,IAAI,EAAKtC,MAAMO,QACfqC,OAAO,CACJ,aAAiB,EAAK5C,MAAMK,YAC5B,MAAW,EAAKL,MAAMM,MAAQ,IAAM,EAAKN,MAAMK,cAElD7B,MAAK,WACF0C,QAAQC,IAAI,qCAGpB,EAAK0B,sBAxIb,uDAaI,WACIrD,KAAKiB,cACLjB,KAAKqC,cAAcrC,KAAKC,MAAMqD,SAAS3C,UACvC4C,SAASC,KAAKC,MAAMC,gBAAkB,eAhB9C,4BAsBI,WAAkB,IAAD,OACb5B,MAAM,4NACD9C,MAAK,SAAA+C,GAAG,OAAIA,EAAIC,UAChBhD,MAAK,SAAAgD,GACD,EAAKb,SAAS,CACXjB,SAAU,EAAKM,MAAMN,SAASyD,OAAO3B,UA3BzD,gCA4II,WACIhC,KAAKC,MAAM2D,QAAQC,KAAK,CACpBC,SAAU,qBA9ItB,oBAmJI,WAAU,IAAD,OACL,OACI,sBAAKrE,UAAU,WAAf,UAEI,sBAAKA,UAAU,oBAAf,UACI,oBAAIA,UAAU,WAAd,SAA0BO,KAAKQ,MAAMG,WACrC,iDAAmB,uBAAnB,0BAA+C,uBAA/C,2BACA,oBAAIlB,UAAU,eAAd,SAA8BO,KAAKQ,MAAMI,eAEzC,8BACoC,IAA/BZ,KAAKQ,MAAMN,SAAS6D,OAAiB,cAAC,EAAD,CAAW7D,SAAUF,KAAKQ,MAAMN,SAAUE,eAAgBJ,KAAKI,eAAiBZ,qBAAsBQ,KAAKR,uBAC3I,kBAKd,8BACKQ,KAAKQ,MAAME,qBACR,8BACKV,KAAKI,eAAeJ,KAAKQ,MAAMC,QAAS,yBACnC,KAElB,qBAAKhB,UAAU,WAAf,SACI,uBAAOuE,YAAY,4DACZd,MAAOlD,KAAKQ,MAAMK,YAAcoD,SAAU,SAAC/C,GAAO,EAAK+B,YAAY/B,QAI9E,wBAAQzB,UAAU,oBAAoByE,KAAK,SAASxE,QAASM,KAAKmD,kBAAlE,yBA/KhB,GAA8B9C,IAAMC,Y,gBCAvB6D,EAAb,4MAMI3D,MAAQ,CACN4D,KAAM,IAPZ,EAUIC,cAAiB,SAAC/B,GACAC,IACTC,YACAC,WAAW,QACXC,MAAM,UAAW,KAAMJ,GACvBK,MACA3D,MAAK,SAAA4D,GACFA,EAAKC,SAAQ,SAACC,GAChB,EAAKwB,mBAAmBhC,SAGzBtD,KACG,EAAKmC,SAAS,CACViD,KAAM,yBAvB1B,EAuCIE,mBAAqB,SAAChC,GAClB,EAAKrC,MAAM2D,QAAQC,KAAK,CACpBC,SAAU,qBACVnD,SAAU2B,KA1CtB,uDAEI,WACIiB,SAASC,KAAKC,MAAMc,WAAa,0BAHzC,+BA4BI,SAAmBH,GAEgB,IAA3BpE,KAAKQ,MAAM4D,KAAKL,OACpB/D,KAAKqE,cAAcD,GAEfpE,KAAKmB,SAAS,CACViD,KAAM,sCAlCtB,yBA+CI,SAAYlD,GACgB,oCAApBlB,KAAKQ,MAAM4D,MAAkE,uBAApBpE,KAAKQ,MAAM4D,KACpEpE,KAAKmB,SAAS,CACViD,KAAM,KAIVpE,KAAKmB,SAAS,CACViD,KAAMlD,EAAEM,OAAO0B,UAvD/B,oBA4DI,WAAU,IAAD,OACL,OAGQ,sBAAKzD,UAAU,OAAf,UACL,oDAES,qMAEI,uBACA,uBAHJ,iFAKI,uBACA,uBANJ,mIAQI,uBACA,uBATJ,wCAcA,cAAC,IAAD,CAAM+E,GAAG,gCAAT,SACA,wBAAQ/E,UAAU,oBAAlB,+BAEA,8DACA,sBAAKA,UAAU,UAAf,UAEA,uBAAOuE,YAAY,WAAWd,MAAOlD,KAAKQ,MAAM4D,KAAO1E,QAAS,SAACwB,GAAO,EAAK+B,YAAY/B,IAAK+C,SAAU,SAAC/C,GAAO,EAAK+B,YAAY/B,MAEjI,wBAAQzB,UAAU,gBAAgBC,QAAU,kBAAM,EAAK+E,kBAAkB,EAAKjE,MAAM4D,OAApF,6BAzFpB,GAA0B/D,IAAMC,WCDnBoE,EAAb,uKAII,WACInB,SAASC,KAAKC,MAAMC,gBAAkB,kBAL9C,sBAUI,SAAUiB,GAEN3E,KAAKC,MAAM2D,QAAQC,KAAK,CACpBC,SAAU,iCACba,MAAOA,MAdhB,oBAoBI,WAAU,IAAD,OACL,OAGI,sBAAKlF,UAAU,oBAAf,UACI,mDAEA,gCAEI,qBAAKA,UAAU,sBAAf,eACA,sBAAKA,UAAU,YAAf,UACI,uDACI,uBADJ,yBAGI,uBAHJ,cAKA,wBAAQC,QAAU,kBAAM,EAAKkF,SAAS,aAAtC,4BAKR,gCAEI,qBAAKnF,UAAU,qBAAf,eACJ,sBAAKA,UAAU,WAAf,UACI,sDACI,uBADJ,uBAGI,uBAHJ,uBAOA,wBAAQC,QAAU,kBAAM,EAAKkF,SAAS,iBAAtC,gCAIJ,gCAEI,qBAAKnF,UAAU,4BAAf,eACA,sBAAKA,UAAU,kBAAf,UACI,4CACI,uBADJ,wBAGI,uBAHJ,0BAKA,wBAAQC,QAAU,kBAAM,EAAKkF,SAAS,aAAtC,mCAjExB,GAAuCvE,IAAMC,WCAhCuE,EAAb,4MAaIrE,MAAQ,CACJ4D,KAAMU,KAAKC,MAAM,OAAAD,KAAKE,SAA+B,SAd7D,EAiBIC,cAAgB,SAAAC,GACH3C,IAASC,YAEfC,WAAW,QAAQ0C,IAAI,CACtBC,QAAS,EAAK5E,MAAM4D,KAAKiB,WACzBV,MAAO,EAAK1E,MAAMqD,SAASqB,MAC3B7D,MAAO,KAEN9B,MAAK,SAACsG,GACH,EAAKrF,MAAM2D,QAAQC,KAAK,CACpBC,SAAU,qBACVnD,SAAU,EAAKH,MAAM4D,KAAKiB,gBAGjCE,OAAM,SAACC,GACJ9D,QAAQ8D,MAAM,0BAA2BA,OAhCzD,uDAEI,WACIjC,SAASC,KAAKC,MAAMC,gBAAkB,kBAH9C,sBAKI,SAAUU,GAENpE,KAAKiF,kBAPb,oBAuCI,WAAU,IAAD,OACL,OAGI,sBAAKxF,UAAU,eAAf,UAEI,mDACA,mCAAOO,KAAKQ,MAAM4D,KAAlB,iBACA,yCAAYpE,KAAKC,MAAMqD,SAASqB,SAE5B,wBAAQlF,UAAU,oBAAoBC,QAAU,kBAAM,EAAKkF,SAAS,EAAKpE,MAAM4D,OAA/E,0BAjDpB,GAAuC/D,IAAMC,WCkB7CiC,IAASkD,cATc,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAIFxD,IAASC,YAEHD,EAAf,EAFA,IAMayD,EAAb,4JAGI,WACI,OACI,cAAC,IAAD,UACI,sBAAKvG,UAAU,eAAf,UACI,+BACI,6BACI,cAAC,IAAD,CAAM+E,GAAG,iBAAT,oBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,qBAAT,oBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,gCAAT,kCAIR,cAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,iBAAiB9D,UAAW+B,IAC9C,cAAC,IAAD,CAAO+B,KAAK,qBAAqB9D,UAAW7B,IAC5C,cAAC,IAAD,CAAO2F,KAAK,gCAAgC9D,UAAWsC,IACvD,cAAC,IAAD,CAAOwB,KAAK,iCAAiC9D,UAAWyC,aAtB5E,GAAyBxE,IAAMC,WCzB/B6F,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9C,SAAS+C,eAAe,SAM1BzH,M","file":"static/js/main.d705dc69.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const WordItem = ({title, showItemsDescription}) => {\n    return (\n            <div className=\"wordItem\" onClick={showItemsDescription}>\n                <h2 className=\"header\">{title}</h2>\n            </div>\n    );\n};\n\nexport const WordItemDescription = ({title, description, pronunciation, example }) => {\n\n    return (\n            <div className=\"itemDetail\">\n                <h1 className=\"header\">{title}</h1>\n                <h2 className=\"pronunciation\">{pronunciation}</h2>\n                <p className=\"descriptionItem\">Definition: {description}</p>\n                <p className=\"descriptionItem\">Example: {example}</p>\n            </div>\n    );\n};","import React from \"react\";\nimport {WordItem} from \"./WordItem\";\n\nexport class WordsList extends React.Component {\n\n    render() {\n        return (\n            <div className=\"wordList\" >\n        {this.props.contacts.map(this.props.wordTowordItem)}\n            </div>\n            )\n    }\n\n}","import {WordsList} from \"../WordsList\";\nimport React from \"react\";\nimport {WordItem, WordItemDescription} from \"../WordItem\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n\nexport class GamePage extends React.Component {\n    state = {\n        contacts: [],\n        getWord: \"\",\n        getDetailsToThisWord: false,\n        gameCode: \"\",\n        lastSentence: \"\",\n        newSentence: \"\",\n        story: \"\",\n        gameID: \"\",\n        definition: \"\",\n    };\n\n    componentDidMount() {\n        this.getNewWords()\n        this.getGameFromDB(this.props.location.gameCode)\n        document.body.style.backgroundColor = \"var(--red)\"\n\n    }\n\n\n\n    getJsonFromApi() {\n        fetch(\"https://api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=true&maxCorpusCount=-1&minDictionaryCount=1&maxDictionaryCount=-1&minLength=5&maxLength=-1&api_key=8gs3fw3vcnv65zzemkox7s6b6kudb91pjc2kmlmaqhjvmpy1a\\n\")\n            .then(res => res.json())\n            .then(json =>\n                {this.setState({\n                    contacts: this.state.contacts.concat(json)\n                })}\n            );\n    }\n\n    getNewWords = (e) => {\n        this.setState({\n            contacts: [],\n            getDetailsToThisWord: false,\n        })\n        for (let i = 0; i < 2; i++) {\n            this.getJsonFromApi(true)\n        }\n    }\n\n    showItemsDescription = (e) => {\n        let index = this.getIndex(e.target.textContent)\n        console.log(index)\n        let getWord = this.state.contacts[index].word\n\n        this.getDefinitionFromApi(getWord)\n\n        this.setState({\n            getWord: getWord,\n            getDetailsToThisWord: true,\n        })\n    }\n\n    getDefinitionFromApi = (getWord) => {\n\n\n        fetch(\" https://api.wordnik.com/v4/word.json/\" + getWord + \"/definitions?limit=200&includeRelated=false&useCanonical=false&includeTags=false&api_key=8gs3fw3vcnv65zzemkox7s6b6kudb91pjc2kmlmaqhjvmpy1a\")\n            .then(res => res.json())\n            .then(json =>{\n\n             console.log(json)\n\n                this.setState({\n               definition: json[0].text,\n\n                })\n            }\n            );\n\n\n\n    }\n\n\n    getIndex = (title) => {\n        return this.state.contacts.findIndex(obj => obj.word === title);\n    }\n\n    wordTowordItem  = (word, component) => {\n        const title = word.word;\n        const description = this.state.definition;\n        const pronunciation = word.pronunciation;\n\n        switch (component){\n            case \"WordItemDescription\" :\n                return <WordItemDescription title= {title} description={description} pronunciation={pronunciation}  />;\n            default:\n                return <WordItem key={title} title={title} showItemsDescription={this.showItemsDescription}/>;\n\n        }\n    }\n\n    getGameFromDB =  (codePIN)=> {\n        const unsub = firebase\n            .firestore()\n            .collection(\"game\")\n            .where('gamePIN', '==', codePIN)\n            .get()\n            .then(game => {\n                game.forEach((doc) => {\n                    console.log(`${doc.id} => ${doc.data()}`);\n\n                    this.setState({\n                        gameCode: codePIN,\n                        lastSentence: doc.get(\"lastSentence\"),\n                        story: doc.get(\"story\"),\n                        gameID: doc.id\n                    })\n                });\n            })\n\n\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            newSentence: e.target.value\n        })\n    }\n\n    submitNewSentence = () => {\n\n        firebase\n            .firestore()\n            .collection(\"game\")\n            .doc(this.state.gameID)\n            .update({\n                \"lastSentence\" : this.state.newSentence,\n                \"story\" :  this.state.story + \" \" + this.state.newSentence\n            })\n            .then(() => {\n                console.log(\"Document successfully updated!\");\n            });\n\n        this.navigateToHomePage()\n\n    }\n\n    navigateToHomePage() {\n        this.props.history.push({\n            pathname: '/make-a-story/'})\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"gamePage\">\n\n                <div className=\"gamePageContainer\">\n                    <h1 className=\"gameCode\">{this.state.gameCode}</h1>\n                    <p>This is the last<br/> sentence someone wrote<br/> in your story &darr;</p>\n                    <h1 className=\"lastSentence\">{this.state.lastSentence}</h1>\n\n                    <div >\n                        {this.state.contacts.length === 2 ?   <WordsList contacts={this.state.contacts} wordTowordItem={this.wordTowordItem}  showItemsDescription={this.showItemsDescription} />\n                            : \"Loading...\" }\n\n                    </div>\n                </div>\n\n                <div>\n                    {this.state.getDetailsToThisWord ?\n                        <div>\n                            {this.wordTowordItem(this.state.getWord, \"WordItemDescription\")}\n                        </div>  : \"\"}\n                </div>\n                <div className=\"textArea\">\n                    <input placeholder=\"Write your sentence here... You must use the given words!\"\n                           value={this.state.newSentence}  onChange={(e) => {this.handleInput(e)}}/>\n\n                </div>\n\n                <button className=\"btn blue circular\" type=\"button\" onClick={this.submitNewSentence}>Done</button>\n\n            </div>\n        );\n    }\n\n\n\n}\n\n","import React from \"react\";\nimport '../App.css'\nimport {Link} from \"react-router-dom\";\nimport firebase from \"firebase\";\n\n\n\nexport class Home extends React.Component {\n\n    componentDidMount() {\n        document.body.style.background = \"var(--orangeGradient)\"\n    }\n\n    state = {\n      code: \"\"\n    };\n\n    getDataFromDB =  (codePIN)=> {\n        const unsub = firebase\n            .firestore()\n            .collection(\"game\")\n            .where('gamePIN', '==', codePIN)\n            .get()\n            .then(game => {\n                game.forEach((doc) => {\n              this.navigateToGamePage(codePIN)\n                });\n            })\n            .then(\n                this.setState({\n                    code: \"Incorrect Game PIN\"\n                })\n            );\n    }\n\n    startGameWithCode (code){\n\n        if (this.state.code.length === 6) {\n        this.getDataFromDB(code)\n        } else {\n            this.setState({\n                code: \"Game PIN must contains 6 digits\"\n            })\n        }\n    }\n\n    navigateToGamePage = (codePIN) => {\n        this.props.history.push({\n            pathname: '/make-a-story/game',\n            gameCode: codePIN\n        })\n    }\n\n\n    handleInput(e) {\n        if (this.state.code === \"Game PIN must contains 6 digits\" || this.state.code === \"Incorrect Game PIN\")  {\n            this.setState({\n                code: \"\"\n            })\n        } else {\n\n            this.setState({\n                code: e.target.value\n            })\n        }\n    }\n\n    render() {\n        return (\n\n\n                <div className=\"home\">\n           <h1>WHAT HAPPENS NEXT?</h1>\n\n                    <p>\n                        Generate the code and share it with your friends to create a fun story together! You need to add a new sentence with two given words and complete What Happens Next?\n                        <br/>\n                        <br/>\n                        You can choose from 3 vocabulary levels - Beginner, Intermediate and Advanced.\n                        <br/>\n                        <br/>\n                        To make it harder you can only see the last sentence someone wrote, and when the story is complete you can read the whole thing.\n                        <br/>\n                        <br/>\n                        Improve your English and have fun!\n                    </p>\n\n\n                    <Link to=\"/make-a-story/create-new-game\">\n                    <button className=\"btn blue circular\"  >Create new game</button>\n                    </Link>\n                    <h3>Or do you already have code?</h3>\n                    <div className=\"gamePin\">\n\n                    <input placeholder=\"Game PIN\" value={this.state.code}  onClick={(e) => {this.handleInput(e)}} onChange={(e) => {this.handleInput(e)}}/>\n\n                    <button className=\"btn red small\" onClick={ () => this.startGameWithCode(this.state.code)}>Enter</button>\n                    </div>\n\n                </div>\n\n\n\n        );\n    }\n\n\n}\n\n\n\n","import {Link, Redirect} from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nimport React from \"react\";\n\n\nexport class CreateNewGamePage extends React.Component {\n\n\n\n    componentDidMount() {\n        document.body.style.backgroundColor = \"var(--orange)\"\n    }\n\n\n\n    goToCode (level){\n\n        this.props.history.push({\n            pathname: '/make-a-story/GameCodeViewPage',\n         level: level\n        })\n\n    }\n\n\n    render() {\n        return (\n\n\n            <div className=\"createNewGamePage\" >\n                <h1>Select your level</h1>\n\n                <div>\n\n                    <div className=\"circle blueGradient\"> </div>\n                    <div className=\"card blue\">\n                        <p>You want learn English\n                            <br/>\n                            and your current level\n                            <br/>\n                            is BASIC</p>\n                        <button onClick={ () => this.goToCode(\"Beginner\")}>Beginner</button>\n\n                    </div>\n                </div>\n\n                <div>\n\n                    <div className=\"circle redGradient\"> </div>\n                <div className=\"card red\">\n                    <p>You can speak English\n                        <br/>\n                        and want to practice\n                        <br/>\n                        with other people</p>\n\n\n                    <button onClick={ () => this.goToCode(\"Intermediate\")}>Intermediate</button>\n                </div>\n                </div>\n\n                <div>\n\n                    <div className=\"circle orangeDarkGradient\"> </div>\n                    <div className=\"card orangeDark\">\n                        <p>You are PRO\n                            <br/>\n                            and you want to learn\n                            <br/>\n                            new, difficult words</p>\n                        <button onClick={ () => this.goToCode(\"Advanced\")}>Advanced</button>\n                    </div>\n                </div>\n            </div>\n\n\n\n        );\n    }\n\n\n\n}\n\n\n","import {Link} from \"react-router-dom\";\nimport React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n\nexport class GameCodeViewPage  extends React.Component {\n\n    componentDidMount() {\n        document.body.style.backgroundColor = \"var(--orange)\"\n    }\n    goToCode (code){\n\n        this.createNewGame()\n\n\n\n    }\n\n    state = {\n        code: Math.floor(Math.random() * (999999 - 111111) + 111111)\n    }\n\n    createNewGame = event => {\n        var db = firebase.firestore();\n\n        db.collection(\"game\").add({\n            gamePIN: this.state.code.toString(),\n            level: this.props.location.level,\n            story: \"\"\n        })\n            .then((docRef) => {\n                this.props.history.push({\n                    pathname: '/make-a-story/game',\n                    gameCode: this.state.code.toString()\n                })\n            })\n            .catch((error) => {\n                console.error(\"Error adding document: \", error);\n            });\n\n    };\n\n\n\n    render() {\n        return (\n\n\n            <div className=\"GameCodeView\">\n\n                <h2>Your Game PIN is:</h2>\n                <h1> { this.state.code   }           </h1>\n                <h3>Level: {this.props.location.level}</h3>\n\n                    <button className=\"btn blue circular\" onClick={ () => this.goToCode(this.state.code)}>Start</button>\n\n            </div>\n\n\n\n        );\n    }\n\n\n\n}\n\n\n","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    Redirect\n} from 'react-router-dom';\nimport {GamePage} from \"./Pages/GamePage\";\nimport {Home} from \"./Pages/Home\";\nimport {CreateNewGamePage} from \"./Pages/CreateNewGamePage\";\nimport {GameCodeViewPage} from \"./Pages/GameCodeViewPage\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCwnpHYoYR1rqd79iASD08rTkS1gd6ZPkw\",\n    authDomain: \"make-a-story.firebaseapp.com\",\n    projectId: \"make-a-story\",\n    storageBucket: \"make-a-story.appspot.com\",\n    messagingSenderId: \"737035725955\",\n    appId: \"1:737035725955:web:4746258ce6d0a32312ffb6\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nvar db = firebase.firestore();\n\nexport default firebase;\n\n\n\nexport class App extends React.Component {\n\n\n    render() {\n        return (\n            <Router>\n                <div className=\"appContainer\">\n                    <ul>\n                        <li>\n                            <Link to=\"/make-a-story/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/make-a-story/game\">Game</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/make-a-story/create-new-game\">Create new game</Link>\n                        </li>\n                    </ul>\n\n                    <Route exact path=\"/make-a-story/\" component={Home} />\n                    <Route path=\"/make-a-story/game\" component={GamePage} />\n                    <Route path=\"/make-a-story/create-new-game\" component={CreateNewGamePage} />\n                    <Route path=\"/make-a-story/GameCodeViewPage\" component={GameCodeViewPage}  />\n                </div>\n\n\n            </Router>\n\n        );\n    }\n\n\n\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}